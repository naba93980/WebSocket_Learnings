Using WebSocket as a transport refers to utilizing the WebSocket protocol as a means of communication or transport layer for data exchange between client and server applications over the Internet.

WebSocket allows for real-time, event-driven communication between client and server.

Using WebSocket as a transport can involve implementing WebSocket in both the client-side and server-side applications, using libraries or frameworks that provide WebSocket support, and adhering to the WebSocket protocol specification.

In the server-side usage of Socket.IO, a socket object represents a connection to a specific client that is connected to the server. It provides methods and events that allow the server to send data to the connected client and receive data from the client, as well as handle various events, such as when a client connects or disconnects.

In the client-side usage of Socket.IO, a socket object represents the connection from the client to the server. It provides methods and events that allow the client to send data to the server and receive data from the server, as well as handle various events, such as when the connection is established or disconnected.



ws http handshake:

The HTTP handshake in a WebSocket (WS) connection is the initial process where a client establishes a connection with a server over the HTTP protocol, before transitioning to the WebSocket protocol for bidirectional communication.

The handshake process involves the following steps:

1. The client sends an HTTP request to the server with an "Upgrade" header and a "Connection" header set to "Upgrade". The request also includes a "Sec-WebSocket-Key" header, which is a random base64-encoded string that the server will use to prove that it understands the client wants the WebSocket protocol.

2. The server responds with an HTTP 101 status code, indicating that it agrees to upgrade the connection to the WebSocket protocol. The server also includes an "Upgrade" header and a "Connection" header set to "Upgrade", as well as a "Sec-WebSocket-Accept" header, which is a hash of the client's "Sec-WebSocket-Key" concatenated with a predefined string.

3. Once the handshake is complete, the connection is upgraded to the WebSocket protocol and both the client and server can send data to each other in real-time.
